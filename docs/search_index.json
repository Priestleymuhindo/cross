[["index.html", "Introduction au machine learning avec tidymodels Chapitre 1 Importation de Données 1.1 Chargement des libraries 1.2 importation des données 1.3 Visualisation des données", " Introduction au machine learning avec tidymodels Priestley Muhindo 2021-05-31 Chapitre 1 Importation de Données 1.1 Chargement des libraries library(tidymodels) library(readr) library(broom.mixed) # convertir les résultats en tibble library(dotwhisker) # Visualisation de données library(forcats) 1.2 importation des données Les données des oursins issues dune expériaence au laboratoire urchins &lt;-read_csv(&quot;https://tidymodels.org/start/models/urchins.csv&quot;) %&gt;% setNames(c(&quot;regime_alim&quot;,&quot;taille&quot;,&quot;largeur&quot;)) %&gt;% mutate(regime_alim=factor(regime_alim)) urchins$regime_alim &lt;- fct_recode(urchins$regime_alim , &quot;initial&quot; = &quot;Initial&quot;, &quot;Pauvre&quot; = &quot;Low&quot;, &quot;Riche&quot; = &quot;High&quot;) Les données des oursins issues dune expérience au laboratoire 1.3 Visualisation des données ggplot(urchins, aes(x=taille,y=largeur,group=regime_alim,color=regime_alim))+ geom_point(size=3)+ geom_smooth(method = &quot;lm&quot;,se=F)+ theme_bw()+ labs(title = &quot;Regréssion de la taille des ursins \\nen fonction de la largeur de leurs largeurs \\npar régime alimentaire&quot;) On peut vite remarquer que que la différence se dégage entre les différents régimes alimentaires "],["partitionnement.html", "Chapitre 2 Partitionnement", " Chapitre 2 Partitionnement urchins_train &lt;- initial_split(data=urchins,prop = 0.8) urchins_train_d &lt;- training(urchins_train) urchins_test_d &lt;- testing(urchins_train) "],["régression-linéaire.html", "Chapitre 3 Régression Linéaire 3.1 Entraînement du modèle", " Chapitre 3 Régression Linéaire Nous allons utiliser un modèle linéaire avec variables qualitatives en mettant en exergue linterraction car nous avons à la fois un prédicteur continu et un prédicteur catégoriel. Étant donné que les pentes semblent être différentes pour au moins deux des régimes dalimentation, construisons un modèle qui permet des interactions bidirectionnelles. Spécifier une formule R avec nos variables de cette manière : Formule du modele et package lm_mod &lt;- linear_reg() %&gt;% # Précision du modèle set_engine(&quot;lm&quot;) # Précision du package 3.1 Entraînement du modèle lm_fit &lt;- lm_mod %&gt;% fit(largeur~taille*regime_alim,data=urchins_train_d) Affichons ces résultats sous forme de tiddy format: tidy(lm_fit) %&gt;% DT::datatable(style = &quot;jqueryui&quot;) tidy(lm_fit) %&gt;% dwplot(whisker_args = list(color=&quot;black&quot;), style = c(&quot;dotwhisker&quot;), vline = geom_vline(xintercept = 0, colour=&quot;green&quot;,linetype=3))+theme_bw() "],["partitionnement-réechantillonage.html", "Chapitre 4 Partitionnement (réechantillonage)", " Chapitre 4 Partitionnement (réechantillonage) "],["cross-validation.html", "Chapitre 5 Cross-validation", " Chapitre 5 Cross-validation "],["meilleurs-hyperparamètres.html", "Chapitre 6 Meilleurs hyperparamètres", " Chapitre 6 Meilleurs hyperparamètres "],["modélisation.html", "Modélisation", " Modélisation "]]
